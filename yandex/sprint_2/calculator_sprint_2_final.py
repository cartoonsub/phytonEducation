import sys


'''
-- ПРИНЦИП РАБОТЫ --
Класс Calculator реализует калькулятор для обратной польской нотации.
Это достигается с помощью стека, в который добавляются числа, а затем они извлекаются для выполнения операций.
Когда встречается оператор, выполняется соответствующая операция над двумя последними числами в стеке.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Алгоритм корректен, потому что он правильно обрабатывает все возможные случаи. 
Если встречается число, оно добавляется в стек. Если встречается оператор, два последних числа извлекаются из стека, 
выполняется соответствующая операция, и результат добавляется обратно в стек. 
В конце в стеке остается только одно число, которое и возвращается как результат.

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --
Временная сложность алгоритма равна O(n), где n - количество элементов во входном списке. 
Это объясняется тем, что алгоритм проходит по списку один раз, 
выполняя константное количество операций для каждого элемента.

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --
Пространственная сложность алгоритма также равна O(n), где n - количество элементов во входном списке. 
Это объясняется тем, что в худшем случае все элементы списка могут быть добавлены в стек.

'''


class Calculator:
    @staticmethod
    def calculate(items):
        stack = []

        for item in items:
            if item.lstrip('-').isdigit():
                stack.append(int(item))
                continue

            b = stack.pop()
            a = stack.pop()
            if item == '+':
                stack.append(a + b)
            elif item == '-':
                stack.append(a - b)
            elif item == '*':
                stack.append(a * b)
            elif item == '/':
                stack.append(a // b)

        return stack.pop()


def main():
    items = sys.stdin.readline().rstrip().split()
    print(Calculator.calculate(items))


if __name__ == '__main__':
    main()
